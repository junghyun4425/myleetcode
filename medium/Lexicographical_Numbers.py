# Problem Link: https://leetcode.com/problems/lexicographical-numbers/

'''
문제 요약: 1부터 n까지의 숫자를 사전식 순서로 정렬하는 문제. (시간 복잡도 O(n), 공간 복잡도 O(1)을 만족할것)
ask: n = 13
answer: [1,10,11,12,13,2,3,4,5,6,7,8,9]

해석:
시간복잡도와 공간복잡도의 여유가 없기 때문에 단순히 문자로바꿔서 정렬하는 방법으로는 불가능.
그래서 어떤 패턴 혹은 규칙을 찾아서 O(n)의 시간복잡도 내에 수행할수 있는지 찾아봄.
자리수에 크게 영향을 받는데, 만약 n이 2000이라면 1, 10, 100, 1000 과같이 n보다 작은 10의 배수가 먼저 나열되어야 함.
n보다 작은 최대 자리수까지 왔다면 다음으로는 1의자리수부터 1씩 더해가며 넣어야 함.
즉, 1001, 1002, 1003, ... 1009
여기서 1009일때 멈추고 10을 나눈다음 1을 더해주면 101로 다시 출발.
이후에 1010, 1011, 1012, ... 를 반복.
따라서 for loop안에서 10의 단위로 곱셈을 1순위, 1의단위로 덧셈을 2순위, 10으로 나눠서 1을 더하는걸 3순위로 조건절을 적용시키면 해결됨.
마지막 3번째에서 주의해야할 점은 1099 -> 1100 이되었을때 11을 먼저 나오게 해줘야하기에 0으로된 자리수를 모두 제거시켜주는게 필수임.
'''

class Solution:
    def lexicalOrder(self, n: int) -> List[int]:
        ans = [0] * n
        num = 1
        for i in range(n):
            ans[i] = num
            if num * 10 <= n:
                num *= 10
            elif num + 1 <= n and (num + 1) % 10 != 0:
                num += 1
            else:
                num = (num // 10) + 1
                while num % 10 == 0:
                    num //= 10
        return ans